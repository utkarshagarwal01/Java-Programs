import java.io.*;
public class Log    
{

	int c1[][]={{0,4,8,12,16,20,24,28,32,36},    //ARRAY FOR STORING LOG TABLE
		           {0,4,7,11,15,18,22,26,29,33},
		           {0,3,7,10,14,17,20,24,27,31},
		           {0,3,7,10,13,16,19,22,25,29},
		           {0,3,6,9,12,14,17,20,23,26},
		           {0,3,6,8,11,14,17,19,22,25},
		           {0,3,5,8,10,13,16,18,21,23},
		           {0,3,5,8,10,12,15,17,20,22},
		           {0,2,4,7,9,11,14,16,18,21},
		           {0,2,4,6,8,11,13,15,17,19},
		           {0,2,4,6,8,11,13,15,17,19},
		           {0,2,4,6,8,10,12,14,16,18},
		           {0,2,4,6,8,10,12,14,15,17},
		           {0,2,4,6,7,9,11,13,15,17},
		           {0,2,4,5,7,9,11,12,14,16},
		           {0,2,3,5,7,9,10,12,14,15},
		           {0,2,3,5,7,8,10,11,13,15},
		           {0,2,3,5,6,8,9,11,13,14},
		           {0,2,3,5,6,8,9,11,12,14},
		           {0,1,3,4,6,7,9,10,12,13},
		           {0,1,3,4,6,7,9,10,11,13},
		           {0,1,3,4,6,7,8,10,11,12},
		           {0,1,3,4,5,7,8,9,11,12},
		           {0,1,3,4,5,6,8,9,10,12},
		           {0,1,3,4,5,6,8,9,10,11},
		           {0,1,2,4,5,6,7,9,10,11},
		           {0,1,2,4,5,6,7,8,10,11},
		           {0,1,2,3,5,6,7,8,9,10},
		           {0,1,2,3,5,6,7,8,9,10},
		           {0,1,2,3,4,5,7,8,9,10},
		           {0,1,2,3,4,5,6,8,9,10},
		           {0,1,2,3,4,5,6,7,8,9},
		           {0,1,2,3,4,5,6,7,8,9},
		           {0,1,2,3,4,5,6,7,8,9},
		           {0,1,2,3,4,5,6,7,8,9},
		           {0,1,2,3,4,5,6,7,8,9},
		           {0,1,2,3,4,5,6,7,7,8},
		           {0,1,2,3,4,5,5,6,7,8},
		           {0,1,2,3,4,4,5,6,7,8},
		           {0,1,2,3,4,4,5,6,7,8},
		           {0,1,2,3,3,4,5,6,7,8},
		           {0,1,2,3,3,4,5,6,7,8},
		           {0,1,2,2,3,4,5,6,7,7},
		           {0,1,2,2,3,4,5,6,6,7},
		           {0,1,2,2,3,4,5,6,6,7},
		           {0,1,2,2,3,4,5,5,6,7},
		           {0,1,2,2,3,4,5,5,6,7},
		           {0,1,2,2,3,4,5,5,6,7},
		           {0,1,1,2,3,4,4,5,6,7},
		           {0,1,1,2,3,4,4,5,6,7},
		           {0,1,1,2,3,4,4,5,6,6},
		           {0,1,1,2,3,4,4,5,6,6},
		           {0,1,1,2,3,3,4,5,6,6},
		           {0,1,1,2,3,3,4,5,5,6},
		           {0,1,1,2,3,3,4,5,5,6},
		           {0,1,1,2,3,3,4,5,5,6},
		           {0,1,1,2,3,3,4,5,5,6},
		           {0,1,1,2,3,3,4,5,5,6},
		           {0,1,1,2,3,3,4,4,5,6},
		           {0,1,1,2,2,3,4,4,5,6},
		           {0,1,1,2,2,3,4,4,5,6},
		           {0,1,1,2,2,3,4,4,5,5},
		           {0,1,1,2,2,3,4,4,5,5},
		           {0,1,1,2,2,3,4,4,5,5},
		           {0,1,1,2,2,3,4,4,5,5},
		           {0,1,1,2,2,3,3,4,5,5},
		           {0,1,1,2,2,3,3,4,5,5},
		           {0,1,1,2,2,3,3,4,4,5},
		           {0,1,1,2,2,3,3,4,4,5},
		           {0,1,1,2,2,3,3,4,4,5},
		           {0,1,1,2,2,3,3,4,4,5},
		           {0,1,1,2,2,3,3,4,4,5},
		           {0,1,1,2,2,3,3,4,4,5},
		           {0,1,1,2,2,3,3,4,4,5},
		           {0,1,1,2,2,3,3,4,4,5},
		           {0,1,1,2,2,3,3,4,4,5},
		           {0,1,1,2,2,3,3,4,4,5},
		           {0,0,1,1,2,2,3,3,4,4},
		           {0,0,1,1,2,2,3,3,4,4},
		           {0,0,1,1,2,2,3,3,4,4},
		           {0,0,1,1,2,2,3,3,4,4},
		           {0,0,1,1,2,2,3,3,4,4},
		           {0,0,1,1,2,2,3,3,4,4},
		           {0,0,1,1,2,2,3,3,4,4},
		           {0,0,1,1,2,2,3,3,4,4},
		           {0,0,1,1,2,2,3,3,4,4},
		           {0,0,1,1,2,2,3,3,4,4},
		           {0,0,1,1,2,2,3,3,4,4},
		           {0,0,1,1,2,2,3,3,4,4},
		           {0,0,1,1,2,2,3,3,3,4}};
		 
	  int b1[][]={{0,5,9,13,17,21,26,30,34,38},      // 2ND ARRAY FOR STORING LOG TABLE
		             {0,4,8,12,16,20,23,27,31,35},
		             {0,3,7,11,14,18,21,25,28,32},
		             {0,3,6,10,13,16,19,23,26,29},
		             {0,3,6,9,12,15,19,22,25,28},
		             {0,3,6,9,11,14,17,20,23,26},
		             {0,3,6,8,11,14,16,19,22,24},
		             {0,3,5,8,10,13,15,18,20,22},
		             {0,2,5,7,9,12,14,17,19,21},
		             {0,2,4,7,9,11,13,16,18,20},
		             {0,2,4,6,8,11,13,15,17,19},
		             {0,2,4,6,8,10,12,14,16,18},
		             {0,2,4,6,8,10,12,14,15,17},
		             {0,2,4,6,7,9,11,13,15,17},
		             {0,2,4,5,7,9,11,12,14,16},
		             {0,2,3,5,7,9,10,12,14,15},
		             {0,2,3,5,7,8,10,11,13,15},
		             {0,2,3,5,6,8,9,11,13,14},
		             {0,2,3,5,6,8,9,11,12,14},
		             {0,1,3,4,6,7,9,10,12,13},
		             {0,1,3,4,6,7,9,10,11,13},
		             {0,1,3,4,6,7,8,10,11,12},
		             {0,1,3,4,5,7,8,9,11,12},
		             {0,1,3,4,5,6,8,9,10,12},
		             {0,1,3,4,5,6,8,9,10,11},
		             {0,1,2,4,5,6,7,9,10,11},
		             {0,1,2,4,5,6,7,8,10,11},
		             {0,1,2,3,5,6,7,8,9,10},
		             {0,1,2,3,5,6,7,8,9,10},
		             {0,1,2,3,4,5,7,8,9,10},
		             {0,1,2,3,4,5,6,8,9,10},
		             {0,1,2,3,4,5,6,7,8,9},
		             {0,1,2,3,4,5,6,7,8,9},
		             {0,1,2,3,4,5,6,7,8,9},
		             {0,1,2,3,4,5,6,7,8,9},
		             {0,1,2,3,4,5,6,7,8,9},
		             {0,1,2,3,4,5,6,7,7,8},
		             {0,1,2,3,4,5,5,6,7,8},
		             {0,1,2,3,4,4,5,6,7,8},
		             {0,1,2,3,4,4,5,6,7,8},
		             {0,1,2,3,3,4,5,6,7,8},
		             {0,1,2,3,3,4,5,6,7,8},
		             {0,1,2,2,3,4,5,6,7,7},
		             {0,1,2,2,3,4,5,6,6,7},
		             {0,1,2,2,3,4,5,6,6,7},
		             {0,1,2,2,3,4,5,5,6,7},
		             {0,1,2,2,3,4,5,5,6,7},
		             {0,1,2,2,3,4,5,5,6,7},
		             {0,1,1,2,3,4,4,5,6,7},
		             {0,1,1,2,3,4,4,5,6,7},
		             {0,1,1,2,3,4,4,5,6,6},
		             {0,1,1,2,3,4,4,5,6,6},
		             {0,1,1,2,3,3,4,5,6,6},
		             {0,1,1,2,3,3,4,5,5,6},
		             {0,1,1,2,3,3,4,5,5,6},
		             {0,1,1,2,3,3,4,5,5,6},
		             {0,1,1,2,3,3,4,5,5,6},
		             {0,1,1,2,3,3,4,5,5,6},
		             {0,1,1,2,3,3,4,4,5,6},
		             {0,1,1,2,2,3,4,4,5,6},
		             {0,1,1,2,2,3,4,4,5,6},
		             {0,1,1,2,2,3,4,4,5,5},
		             {0,1,1,2,2,3,4,4,5,5},
		             {0,1,1,2,2,3,4,4,5,5},
		             {0,1,1,2,2,3,4,4,5,5},
		             {0,1,1,2,2,3,3,4,5,5},
		             {0,1,1,2,2,3,3,4,5,5},
		             {0,1,1,2,2,3,3,4,4,5},
		             {0,1,1,2,2,3,3,4,4,5},
		             {0,1,1,2,2,3,3,4,4,5},
		             {0,1,1,2,2,3,3,4,4,5},
		             {0,1,1,2,2,3,3,4,4,5},
		             {0,1,1,2,2,3,3,4,4,5},
		             {0,1,1,2,2,3,3,4,4,5},
		             {0,1,1,2,2,3,3,4,4,5},
		             {0,1,1,2,2,3,3,4,4,5},
		             {0,1,1,2,2,3,3,4,4,5},
		             {0,0,1,1,2,2,3,3,4,4},
		             {0,0,1,1,2,2,3,3,4,4},
		             {0,0,1,1,2,2,3,3,4,4},
		             {0,0,1,1,2,2,3,3,4,4},
		             {0,0,1,1,2,2,3,3,4,4},
		             {0,0,1,1,2,2,3,3,4,4},
		             {0,0,1,1,2,2,3,3,4,4},
		             {0,0,1,1,2,2,3,3,4,4},
		             {0,0,1,1,2,2,3,3,4,4},
		             {0,0,1,1,2,2,3,3,4,4},
		             {0,0,1,1,2,2,3,3,4,4},
		             {0,0,1,1,2,2,3,3,4,4},
		             {0,0,1,1,2,2,3,3,3,4}};
		             
		int a2[][]={{0,43,86,128,170,212,253,294,334,374},                  //3RD ARRAY FOR STORING LOG TABLE
		             {414,453,492,531,569,607,645,682,719,755},
		             {792,828,864,899,934,969,1004,1038,1072,1106},   
		             {1139,1173,1206,1239,1271,1303,1335,1376,1399,1430},  
		             {1461,1492,1532,1553,1584,1614,1644,1673,1703,1732},
		             {1761,1790,1818,1847,1875,1903,1931,1959,1987,2014},
		             {2014,2068,2095,2122,2148,2175,2201,2227,2253,2279},
		             {2304,2330,2355,2380,2405,2430,2455,2480,2504,2529},
		             {2533,2577,2601,2625,2648,2672,2695,2718,2742,2765},
		             {2788,2810,2833,2856,2878,2900,2923,2945,2967,2989},
		             {3010,3032,3054,3075,3096,3118,3139,3160,3181,3201},
		             {3222,3243,3263,3284,3304,3324,3345,3365,3385,3404},
		             {3424,3444,3464,3483,3502,3522,3541,3560,3579,3598},
		             {3617,3636,3655,3674,3692,3711,3729,3747,3766,3784},
		             {3802,3820,3838,3856,3874,3892,3909,3927,3945,3962},
		             {3979,3997,4014,4031,4048,4065,4082,4099,4116,4133},
		             {4150,4166,4183,4200,4216,4232,4249,4265,4281,4298},
		             {4314,4330,4346,4362,4378,4393,4409,4425,4440,4456},
		             {4472,4487,4502,4518,4533,4548,4564,4579,4594,4609},
		             {4624,4639,4645,4669,4683,4698,4713,4728,4742,4757},
		             {4771,4786,4800,4814,4829,4843,4857,4871,4886,4900},
		             {4914,4928,4942,4955,4969,4983,4997,5011,5024,5038},
		             {5051,5065,5079,5092,5105,5119,5132,5145,5159,5172},
		             {5185,5198,5211,5224,5237,5250,5263,5276,5289,5302},
		             {5315,5328,5340,5353,5366,5378,5391,5403,5416,5428},
		             {5441,5453,5465,5478,5490,5502,5514,5527,5539,5551},
		             {5563,5575,5587,5599,5611,5623,5635,5647,5658,5670},
		             {5682,5694,5705,5717,5729,5740,5752,5763,5775,5786},
		             {5798,5809,5821,5832,5843,5855,5866,5877,5888,5899},
		             {5911,5922,5933,5944,5955,5966,5977,5988,5999,6010},
		             {6021,6031,6042,6053,6064,6075,6085,6096,6107,6117},
		             {6128,6138,6149,6160,6170,6180,6191,6201,6212,6222},
		             {6232,6243,6253,6263,6274,6284,6294,6304,6314,6325},
		             {6335,6345,6355,6365,6375,6385,6395,6405,6415,6425},
		             {6435,6444,6454,6464,6474,6484,6493,6503,6513,6522},
		             {6532,6542,6551,6561,6571,6580,6590,6599,6609,6618},
		             {6628,6637,6646,6656,6665,6675,6684,6693,6702,6712},
		             {6721,6730,6739,6749,6758,6767,6776,6785,6794,6803},
		             {6812,6821,6830,6839,6848,6857,6866,6875,6884,6893},
		             {6902,6911,6920,6928,6937,6946,6955,6964,6972,6981},
		             {6990,6998,7007,7016,7024,7033,7042,7050,7059,7067},
		             {7076,7084,7093,7101,7110,7118,7126,7135,7143,7152},
		             {7160,7168,7177,7185,7193,7202,7210,7218,7226,7235},
		             {7243,7251,7259,7267,7275,7284,7292,7300,7308,7316},
		             {7324,7332,7340,7348,7356,7364,7372,7380,7388,7396},
		             {7404,7412,7419,7427,7435,7443,7451,7459,7466,7474},
		             {7482,7490,7497,7505,7513,7520,7528,7536,7543,7551},
		             {7559,7566,7574,7582,7589,7597,7604,7612,7619,7627},
		             {7634,7642,7649,7657,7664,7672,7679,7686,7694,7701},
		             {7709,7716,7723,7731,7738,7745,7752,7760,7767,7774},
		             {7782,7789,7796,7803,7810,7818,7825,7832,7839,7846},
		             {7853,7860,7868,7875,7882,7889,7896,7903,7910,7917},
		             {7924,7931,7938,7945,7952,7959,7966,7973,7980,7987},
		             {7993,8000,8007,8014,8021,8028,8035,8041,8048,8055},
		             {8062,8069,8075,8082,8089,8096,8102,8109,8116,8122},
		             {8129,8136,8142,8149,8156,8162,8169,8176,8182,8189},
		             {8195,8202,8209,8215,8222,8228,8235,8241,8248,8254},
		             {8261,8267,8274,8280,8287,8293,8299,8306,8312,8319},
		             {8325,8331,8338,8344,8351,8357,8363,8370,8376,8382},
		             {8388,8395,8401,8407,8414,8420,8426,8432,8439,8445},
		             {8451,8457,8463,8470,8476,8482,8488,8494,8500,8506},
		             {8513,8519,8525,8531,8537,8543,8549,8555,8561,8567},
		             {8573,8579,8585,8591,8597,8603,8609,8615,8621,8627},
		             {8633,8639,8645,8651,8657,8663,8669,8675,8681,8686},
		             {8692,8698,8704,8710,8716,8722,8727,8733,8739,8745},
		             {8751,8756,8762,8768,8774,8779,8785,8791,8797,8802},
		             {8808,8814,8820,8825,8831,8837,8842,8848,8854,8859},
		             {8865,8871,8876,8882,8887,8893,8899,8904,8910,8915},
		             {8921,8927,8932,8938,8943,8949,8954,8960,8965,8971},
		             {8976,8982,8987,8993,8998,9004,9009,9015,9020,9025},
		             {9031,9036,9042,9047,9053,9058,9063,9069,9074,9079},
		             {9085,9090,9096,9101,9106,9112,9117,9122,9128,9133},
		             {9138,9143,9149,9154,9159,9165,9170,9175,9180,9186},
		             {9191,9196,9201,9206,9212,9217,9222,9227,9232,9238},
		             {9243,9248,9253,9258,9263,9269,9274,9279,9284,9289},
		             {9294,9299,9304,9309,9315,9320,9325,9330,9335,9340},
		             {9345,9350,9355,9360,9365,9370,9375,9380,9385,9390},
		             {9395,9400,9405,9410,9415,9420,9425,9430,9435,9440},
		             {9445,9450,9455,9460,9465,9469,9474,9479,9484,9489},
		             {9494,9499,9504,9509,9513,9518,9523,9528,9533,9538},
		             {9542,9547,9552,9557,9562,9566,9571,9576,9581,9586},
		             {9590,9595,9600,9605,9609,9614,9619,9624,9628,9633},
		             {9638,9643,9647,9652,9657,9661,9666,9671,9675,9680},
		             {9685,9689,9694,9699,9703,9708,9713,9717,9722,9727},
		             {9731,9736,9741,9745,9750,9754,9759,9763,9768,9773},
		             {9777,9782,9786,9791,9795,9800,9805,9809,9814,9818},
		             {9823,9827,9832,9836,9841,9845,9850,9854,9859,9863},
		             {9868,9872,9877,9881,9886,9890,9894,9899,9903,9908},
		             {9912,9917,9921,9926,9930,9934,9939,9943,9948,9952},
		             {9956,9961,9965,9969,9974,9978,9983,9987,9991,9996}};
	double cal(double n)//METHOD CALCULATING LOG FOR CALCULATOR
	{
	    double a,b,c,d=0,e,f,g=0,r=1,a1=0,x=0,y=1,z=1,log=0,m1=0,m2=0,mantissa;
	    int characterstic=0,ch=0;
		if(n<1)
		{
		    a=n;
		    for(characterstic=1;a<.1;characterstic++)
		    {
		    a=a*10;                                                    //IF NUMBER IS LESS THAN 1 THEN CHARACTERSTIC IS CALCULATED IN THIS WAY
		    }
		    ch=-characterstic;
		 }
		else
		{
		    a=n;
		 for(characterstic=0;a>=1;characterstic++)                    //IF NUMBER IS GREATER THAN 1 THEN CHARACTERSTIC IS CALCULATED IN THIS WAY
		    {
		    a=a/10;
		    }
		  ch=characterstic-1;  
		 }
		 
		if(n<1)
		{
		    b=n;
		 for(c=1;c<=characterstic;c++)
		 {                                                           //IF NUMBER IS LESS THAN 1 THEN NUMBER IS CHANGED INTO WHOLE NUMBER IN THIS WAY
		     b=b*10;
		 }
		 d=b*1000;
		}
		else
		 {
		     b=n;
		 for(c=1;c<=characterstic;c++)                               //IF NUMBER IS GREATER THAN 1 THEN NUMBER IS CHANGED INTO WHOLE NUMBER IN THIS WAY
		 {
		     b=b/10;
		 }
		 d=b*10000;
		}
		e=d;
		while((e*10)%10!=0)                                         //METHOD FOR ROUNDING OF NUMBER TO FOUR DIGITS FOR CALCULATING MANTISSA
		{
		    a1=a1+1;
		    e=e*10;
		    
		}
		for(b=1;b<=a1;b++)
		{
		    c=e;
		    r=e%10;
		    e=c-r;
		    e=e/10;
		}
		if(r>=5)
		{
		    e=e+1;
		}
		b=0;
		while(e!=0)                                                 //HERE NUMBER IS DIVIDED INTO MODULES FOR REFRERING LOG TABLE
		{
		    b=b+1;
		    f=e%10;
		    if(b==1)
		    {
		      z=f;
		    }
		    if(b==2)
		    {
		     y=f;
		    }
		    if(b>2)
		    {
		        x=(x*10)+f;
		    }
		    e=e-f;
		    e=e/10;
		}
		g=x;
		x=0;
		while(g!=0)
		{
		    f=g%10;
		    x=(x*10)+f;
		    g=g-f;
		    g=g/10;
		}
		if(x<10)                                                     //IF X<10 IT IS MULTIPLIED BY 10
		{
		    x=x*10;
		}
		int x1=0,y1=0,z1=0;
		while(x1!=x)                                                 //X,Y,Z ARE CHANGED INTO INTEGER AS ARRAY CANNOT HAVE INDEXES AS DOUBLE
		x1++;
		while(y1!=y)
		y1++;
		while(z1!=z)
		z1++;
        
		m1=a2[x1-10][y1];                                            //LOGTABLE IS REFRENCED HERE AND MANTISSA IS CALCULATED
		if(y1<=4&&x1<20) 
	    m2=b1[x1-10][z1];
	    else
		m2=c1[x1-10][z1];
	    mantissa=(m1+m2)/10000;
		log=ch+mantissa;
		return log;
	}
	
	public void main(String args[])throws IOException 
	{            
	    BufferedReader ob = new BufferedReader(new InputStreamReader(System.in));
	    System.out.println("DO YOU WANT TO SEE LOG TABLE");         //OPTION TO SEE LOG TABLE
	    System.out.println("ENTER 1 FOR YES");
	    System.out.println("ENTER 0 FOR NO");
	    String s2=ob.readLine();
	    int choice=Integer.parseInt(s2);
	    if(choice==1)
	    {
	        System.out.println("<------------------------------------------------LOG TABLE--------------------------------------------------> ");
	        System.out.println( );
	        System.out.println("                                                                        <-----------------ADD---------------> ");
	        System.out.println( );
	        System.out.println("      0     1     2     3     4     5     6     7     8     9           0   1   2   3   4   5   6   7   8   9");
	        System.out.println( );
	        int i,j,o,k,t1;
	        double j1,o1,k1;
	        for(i=0;i<90;i++)                                     //RUNNING LOOP TO DISPLAY LOG TABLE
	        {
	            System.out.print(i+10+".  ");
	            for(j=0;j<10;j++)
	            {
	               j1=a2[i][j];
	               if(j1!=0)
	               {
	                  while(j1<1000)
	                 {
	                   System.out.print(" ");
	                   j1=j1*10;
	                 }
	               }
	               else
	               {
	                 System.out.print("   ");
	               }
	               System.out.print(a2[i][j]+"  ");
	            }
	            System.out.print("    ");
	            for(o=0;o<10;o++)
	            {
	                o1=c1[i][o];
	               if(o1!=0)
	               {
	                 while(o1<10)
	                 {
	                   System.out.print(" ");
	                   o1=o1*10;
	                 }
	               }
	               else
	               {
	                 if(o==0)
	                 System.out.print("   ");
	                 else
	                 System.out.print(" ");
	               }
	                System.out.print(c1[i][o]+"  ");
	            }
	                if(i<10)
	                {
	                    System.out.println();
	                    System.out.print("                                                                     ");          
	                    for(k=0;k<10;k++)
	                    {
	                        k1=b1[i][k];
	                        if(k1!=0)
	                        {
	                          while(k1<10)
	                          {
	                            System.out.print(" ");
	                            k1=k1*10;
	                          }
	                        }
	                        else
	                        {
	                         System.out.print("   ");
	                        }
	                     System.out.print(b1[i][k]+"  ");
	                    }
	                }
	                System.out.println();
	            }
	        }
	  
	     System.out.println( );
	     int t=1,choice1,loop=0;
	     double a,b,c,d=0,e,f,g=0,r=1,a1=0,x=0,y=1,z=1,log=0,m1=0,m2=0,mantissa;
	    int characterstic=0,ch=0;
	     while(t!=0)
	    {
	    System.out.println( );
	    if(loop==0)
	    System.out.println("ENTER A NUMBER");
	    else
	    System.out.println("ENTER ANOTHER NUMBER");
	    loop++;
	    String s1=ob.readLine();
	    double n=Double.parseDouble(s1);
	    if(n<=0)
	    System.out.println("INVALID INPUT FOR FUNCTION");
	    else
	    {
	    double n1=cal(n);
		System.out.println("THE LOGARITHM OF " +n +" IS = "+n1+"  (NEAREST TO 4 DECIMAL PLACE)");
		}
		System.out.println( );
		System.out.println("DO YOU WANT TO CONTINUE ");      //LOOP TO CONTINUE
		System.out.println("ENTER 1 FOR YES");
		System.out.println("ENTER 0 FOR NO");
		String s3=ob.readLine();
	    choice1=Integer.parseInt(s3);
	    if(choice1==1)
	    t=1;
	    else
	    t=0;
	    if(t==0)
	    {
	        System.out.println();
	    System.out.print("<-----------------------------------------------THANK YOU----------------------------------------------------->");
	    }
	    }
  }
}