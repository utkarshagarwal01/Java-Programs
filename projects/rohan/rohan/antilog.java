import java.io.*;
public class antilog  
{
   int a[][]={{0,0,0,1,1,1,1,2,2,2},//1ST ARRAY FOR STORING ANTILOG TABLE
		           {0,0,0,1,1,1,1,2,2,2},
		           {0,0,0,1,1,1,1,2,2,2},
		           {0,0,0,1,1,1,1,2,2,2},
		           {0,0,1,1,1,1,2,2,2,2},
		           {0,0,1,1,1,1,2,2,2,2},
		           {0,0,1,1,1,1,2,2,2,2},
		           {0,0,1,1,1,1,2,2,2,2},
		           {0,0,1,1,1,1,2,2,2,3},
		           {0,0,1,1,1,1,2,2,2,3},
		           {0,0,1,1,1,1,2,2,2,3},
		           {0,0,1,1,1,2,2,2,2,3},
		           {0,0,1,1,1,2,2,2,2,3},
		           {0,0,1,1,1,2,2,2,3,3},
		           {0,0,1,1,1,2,2,2,3,3},
		           {0,0,1,1,1,2,2,2,3,3},
		           {0,0,1,1,1,2,2,2,3,3},
		           {0,0,1,1,1,2,2,2,3,3},
		           {0,0,1,1,1,2,2,2,3,3},
		           {0,0,1,1,1,2,2,3,3,3},
		           {0,0,1,1,1,2,2,3,3,3},
		           {0,0,1,1,1,2,2,3,3,3},
		           {0,0,1,1,2,2,2,3,3,3},
		           {0,0,1,1,2,2,2,3,3,4},
		           {0,0,1,1,2,2,2,3,3,4},
		           {0,0,1,1,2,2,2,3,3,4},
		           {0,0,1,1,2,2,3,3,3,4},
		           {0,0,1,1,2,2,3,3,3,4},
		           {0,0,1,1,2,2,3,3,4,4},
		           {0,0,1,1,2,2,3,3,4,4},
		           {0,0,1,1,2,2,3,3,4,4},
		           {0,0,1,1,2,2,3,3,4,4},
		           {0,0,1,1,2,2,3,3,4,4},
		           {0,0,1,1,2,2,3,3,4,4},
		           {0,1,1,2,2,3,3,4,4,5},
		           {0,1,1,2,2,3,3,4,4,5},
		           {0,1,1,2,2,3,3,4,4,5},
		           {0,1,1,2,2,3,3,4,4,5},
		           {0,1,1,2,2,3,3,4,4,5},
		           {0,1,1,2,2,3,3,4,5,5},
		           {0,1,1,2,2,3,4,4,5,5},
		           {0,1,1,2,2,3,4,4,5,5},
		           {0,1,1,2,2,3,4,4,5,6},
		           {0,1,1,2,3,3,4,4,5,6},
		           {0,1,1,2,3,3,4,4,5,6},
		           {0,1,1,2,3,3,4,5,5,6},
		           {0,1,1,2,3,3,4,5,5,6},
		           {0,1,1,2,3,3,4,5,5,6},
		           {0,1,1,2,3,4,4,5,6,6},
		           {0,1,1,2,3,4,4,5,6,6},
		           {0,1,1,2,3,4,4,5,6,7},
		           {0,1,2,2,3,4,5,5,6,7},
		           {0,1,2,2,3,4,5,5,6,7},
		           {0,1,2,2,3,4,5,6,6,7},
		           {0,1,2,2,3,4,5,6,6,7},
		           {0,1,2,2,3,4,5,6,7,7},
		           {0,1,2,3,3,4,5,6,7,8},
		           {0,1,2,3,3,4,5,6,7,8},
		           {0,1,2,3,4,4,5,6,7,8},
		           {0,1,2,3,4,5,5,6,7,8},
		           {0,1,2,3,4,5,6,6,7,8},
		           {0,1,2,3,4,5,6,7,8,9},
		           {0,1,2,3,4,5,6,7,8,9},
		           {0,1,2,3,4,5,6,7,8,9},
		           {0,1,2,3,4,5,6,7,8,9},
		           {0,1,2,3,4,5,6,7,8,9},
		           {0,1,2,3,4,5,6,7,9,10},
		           {0,1,2,3,4,5,7,8,9,10},
		           {0,1,2,3,4,6,7,8,9,10},
		           {0,1,2,3,5,6,7,8,9,10},
		           {0,1,2,4,5,6,7,8,9,11},
		           {0,1,2,4,5,6,7,8,10,11},
		           {0,1,2,4,5,6,7,9,10,11},
		           {0,1,3,4,5,6,8,9,10,11},
		           {0,1,3,4,5,6,8,9,10,12},
		           {0,1,3,4,5,7,8,9,10,12},
		           {0,1,3,4,5,7,8,9,11,12},
		           {0,1,3,4,5,7,8,10,11,12},
		           {0,1,3,4,6,7,8,10,11,13},
		           {0,1,3,4,6,7,9,10,11,13},
		           {0,1,3,4,6,7,9,10,12,13},
		           {0,2,3,5,6,8,9,11,12,14},
		           {0,2,3,5,6,8,9,11,12,14},
		           {0,2,3,5,6,8,9,11,13,14},
		           {0,2,3,5,6,8,10,11,13,15},
		           {0,2,3,5,7,8,10,12,13,15},
		           {0,2,3,5,7,8,10,12,13,15},
		           {0,2,3,5,7,9,10,12,14,16},
		           {0,2,4,5,7,9,11,12,14,16},
		           {0,2,4,5,7,9,11,13,14,16},
		           {0,2,4,6,7,9,11,13,15,17},
		           {0,2,4,6,8,9,11,13,15,17},
		           {0,2,4,6,8,10,12,14,15,17},
		           {0,2,4,6,8,10,12,14,16,18},
		           {0,2,4,6,8,10,12,14,16,18},
		           {0,2,4,6,8,10,12,15,17,19},
		           {0,2,4,6,8,11,13,15,17,19},
		           {0,2,4,7,9,11,13,15,17,20},
		           {0,2,4,7,9,11,13,16,18,20},
		           {0,2,5,7,9,11,14,16,18,20}};
		           
		int a2[][]={{1000,1002,1005,1007,1090,1012,1014,1016,1019,1021},//2ND ARRAY FOR STORING LOG TABLE
		            {1023,1026,1028,1030,1033,1035,1038,1040,1042,1045},
		            {1047,1050,1052,1054,1057,1059,1062,1064,1067,1069},   
		            {1072,1074,1076,1079,1081,1084,1086,1089,1091,1094},  
		            {1096,1099,1102,1104,1107,1109,1112,1114,1117,1119},
		            {1122,1125,1127,1130,1132,1135,1138,1140,1143,1146},
		            {1148,1151,1153,1156,1159,1161,1164,1167,1169,1172},
		            {1175,1178,1180,1183,1186,1189,1191,1194,1197,1199},
		            {1202,1205,1208,1211,1213,1216,1219,1222,1225,1227},
		            {1230,1233,1236,1239,1242,1245,1247,1250,1253,1256},
		            {1259,1262,1265,1268,1271,1274,1276,1279,1282,1285},
		            {1288,1291,1294,1297,1300,1303,1306,1309,1312,1315},
		            {1318,1321,1324,1327,1330,1334,1337,1340,1343,1346},
		            {1349,1352,1355,1358,1361,1365,1368,1371,1374,1377},
		            {1380,1384,1387,1390,1393,1396,1400,1403,1406,1409},
		            {1413,1416,1419,1422,1426,1429,1432,1435,1439,1442},
		            {1445,1449,1452,1455,1459,1462,1466,1469,1472,1476},
		            {1479,1483,1486,1489,1493,1496,1500,1503,1507,1510},
		            {1514,1517,1521,1524,1528,1531,1535,1538,1542,1545},
		            {1549,1552,1556,1560,1563,1567,1570,1574,1578,1581},
		            {1585,1589,1592,1596,1600,1603,1607,1611,1614,1648},
		            {1622,1628,1629,1633,1637,1641,1644,1648,1652,1656},
		            {1660,1663,1667,1671,1675,1679,1683,1687,1690,1694},
		            {1698,1702,1706,1710,1714,1718,1722,1726,1730,1734},
		            {1738,1742,1746,1750,1754,1758,1762,1766,1770,1774},
		            {1778,1782,1786,1791,1795,1799,1803,1807,1811,1816},
		            {1820,1824,1828,1832,1837,1841,1845,1849,1854,1858},
		            {1862,1866,1871,1875,1879,1884,1888,1892,1897,1901},
		            {1905,1910,1914,1919,1923,1928,1932,1936,1941,1945},
		            {1950,1954,1959,1963,1968,1972,1977,1982,1986,1991},
		            {1995,2000,2004,2009,2014,2018,2023,2028,2032,2037},
		            {2042,2046,2051,2056,2061,2065,2070,2075,2080,2084},
		            {2089,2094,2099,2104,2109,2113,2118,2123,2128,2133},
		            {2138,2143,2148,2153,2158,2163,2168,2173,2178,2183},
		            {2188,2193,2198,2203,2208,2213,2218,2223,2228,2234},
		            {2239,2244,2249,2254,2259,2265,2270,2275,2280,2286},
		            {2291,2296,2301,2307,2312,2317,2323,2328,2333,2339},
		            {2344,2350,2355,2360,2366,2371,2377,2382,2388,2393},
		            {2399,2404,2410,2415,2421,2427,2432,2438,2443,2449},
		            {2455,2460,2466,2470,2477,2483,2489,2495,2500,2506},
		            {2512,2518,2523,2529,2535,2341,2547,2553,2559,2624},
		            {2570,2576,2582,2588,2594,2600,2606,2612,2618,2624},
		            {2630,2366,2642,2649,2655,2661,2667,2673,2679,2685},
		            {2692,2698,2704,2710,2716,2723,2729,2735,2742,2748},
		            {2754,2761,2767,2773,2780,2786,2793,2799,2805,2812},
		            {2818,2825,2831,2838,2844,2851,2858,2864,2871,2877},
		            {2884,2891,2897,2904,2911,2917,2924,2931,2938,2944},
		            {2951,2958,2965,2972,2979,2985,2992,2999,3006,3013},
		            {3020,3027,3034,3041,3048,3055,3062,3069,3076,3083},
		            {3090,3097,3105,3112,3119,3126,3133,3141,3148,3155},
		            {3162,3170,3177,3184,3192,3199,3206,3214,3221,3228},
		            {3236,3243,3251,3258,3266,3273,3281,3289,3296,3304},
		            {3311,3319,3327,3334,3342,3350,3357,3365,3373,3381},
		            {3388,3396,3404,3412,3420,3428,3436,3443,3451,3459},
		            {3467,3475,3483,3491,3499,3508,3516,3524,3532,3540},
		            {3548,3556,3565,3573,3581,3589,3597,3606,3614,3622},
		            {3631,3639,3648,3656,3664,3673,3681,3690,3698,3707},
		            {3717,3724,3733,3741,3750,3758,3767,3776,3784,3793},
		            {3802,3811,3819,3828,3837,3846,3855,3864,3873,3882},
		            {3890,3899,3908,3917,3926,3936,3945,3954,3963,3972},
		            {3981,3990,3999,4009,4018,4027,4036,4046,4055,4064},
		            {4074,4083,4093,4102,4111,4121,4130,4140,4150,4159},
		            {4169,4178,4188,4198,4207,4217,4227,4236,4246,4256},
		            {4266,4276,4285,4295,4305,4315,4325,4335,4345,4355},
		            {4365,4375,4385,4395,4406,4416,4426,4436,4446,4457},
		            {4467,4477,4487,4498,4508,4519,4529,4539,4550,4560},
		            {4571,4581,4592,4603,4613,4624,4634,4645,4656,4667},
		            {4677,4688,4699,4710,4721,4732,4742,4753,4764,4775},
		            {4786,4797,4808,4819,4831,4842,4853,4864,4875,4887},
		            {4898,4909,4920,4932,4943,4955,4966,4977,4989,5000},
		            {5012,5023,5035,5047,5058,5070,5082,5093,5105,5117},
		            {5129,5140,5152,5164,5176,5188,5200,5212,5224,5236},
		            {5248,5260,5272,5284,5297,5309,5321,5333,5346,5358},
		            {5370,5383,5395,5408,5420,5433,5445,5458,5470,5483},
		            {5495,5508,5521,5534,5546,5559,5572,5585,5598,5610},
		            {5623,5636,5649,5662,5675,5689,5702,5715,5728,5741},
		            {5754,5768,5781,5794,5808,5821,5834,5848,5861,5875},
		            {5888,5902,5916,5929,5943,5957,5970,5984,5998,6012},
		            {6026,6039,6053,6067,6080,6095,6109,6124,6138,6152},
		            {6166,6180,6194,6209,6223,6237,6252,6266,6281,6295},
		            {6310,6324,6339,6353,6368,6383,6397,6412,6427,6442},
		            {6457,6471,6486,6501,6516,6531,6546,6561,6577,6592},
		            {6607,6622,6637,6653,6668,6683,6699,6714,6730,6745},
		            {6761,6776,6792,6808,6823,6839,6855,6871,6887,6902},
		            {6918,6934,6950,6966,6982,6998,7015,7031,7047,7063},
		            {7079,7096,7112,7129,7145,7161,7178,7194,7211,7228},
		            {7244,7261,7278,7295,7311,7328,7345,7362,7379,7396},
		            {7413,7430,7447,7464,7482,7499,7516,7534,7551,7568},
		            {7586,7603,7621,7638,7656,7674,7691,7709,7727,7745},
		            {7762,7780,7798,7816,7834,7852,7870,7889,7907,7925},
		            {7943,7962,7980,7998,8017,8035,8054,8072,8091,8110},
		            {8128,8147,8166,8185,8204,8222,8241,8260,8279,8299},
		            {8318,8337,8356,8375,8395,8414,8433,8453,8472,8492},
		            {8511,8531,8551,8570,8590,8610,8630,8650,8670,8690},
		            {8710,8730,8750,8770,8790,8810,8831,8851,8872,8892},
		            {8913,8933,8954,8974,8955,9016,9036,9057,9078,9099},
		            {9120,9141,9162,9183,9204,9226,9247,9268,9290,9311},
		            {9333,9354,9376,9397,9419,9441,9462,9484,9506,9528},
		            {9550,9572,9594,9616,9638,9661,9683,9705,9727,9750},
		            {9772,9795,9817,9840,9863,9886,9906,9931,9954,9977}};
    double cal(double n)//METHOD CALCULATING ANTILOG FOR CALCULATOR
    {
	    int characterstic=0,ch=0;
	    int x=0,b;
	    double c,r=1,a1=0,n1=n;
	    if(n<0)
	    {
	        n=-n;                               //IF NUMBER IS NEGATIVE IT IS MADE POSITIVE
	    }
	    while(x<=n)                             
		x++;
		double y=n-(x-1);                       //METHOD FOR SEPRATING FRACTIONAL PART AS WHOLE NUMBER
		y=y*10000;
		
		while((y*10)%10!=0)
		{
		    a1=a1+1;
		    y=y*10;                            //METHOD FOR ROUNDING OF NUMBER TO FOUR DIGITS FOR CALCULATING MANTISSA
		    
		}
		
		for(b=1;b<=a1;b++)
		{
		    c=y;
		    r=y%10;
		    y=c-r;
		    y=y/10;
		}
		
		if(r>=5)
		{
		    y=y+1;
		}
		
		if(n1<0)
		y=10000-y;
		b=0;
		double f,g,z=1,y1=1,x1=0;
		while(y!=0)
		{                                                      //HERE NUMBER IS DIVIDED INTO MODULES FOR REFRERING ANTILOG TABLE
		    b=b+1;
		    f=y%10;
		    if(b==1)
		    {
		      z=f;
		    }
		    if(b==2)
		    {
		     y1=f;
		    }
		    if(b>2)
		    {
		        x1=(x1*10)+f;
		    }
		    y=y-f;
		    y=y/10;
		}
		g=x1;
		x1=0;
		
		while(g!=0)
		{
		    f=g%10;
		    x1=(x1*10)+f;
		    g=g-f;
		    g=g/10;
		}
		
		if(x1<10)                                 //IF X1<10 IT IS MULTIPLIED BY 10
		{
		    x1=x1*10;
		}
		int x2=0,y2=0,z2=0;
		while(x2!=x1)
		x2++;                                     //X1,Y1,Z1 ARE CHANGED INTO INTEGER AS ARRAY CANNOT HAVE INDEXES AS DOUBLE
		while(y2!=y1)
		y2++;
		while(z2!=z)
		z2++;       
		double m1,m2,mantissa,antilog;
		int i;
		
		m1=a2[x2][y2];                             //ANTILOGTABLE IS REFRENCED HERE AND MANTISSA IS CALCULATED
		m2=a[x2][z2];
	    mantissa=(m1+m2)/10000;
	    antilog=mantissa;
	    if(n1>=0)
	    {
	    for(i=1;i<=x;i++)
	    {                                           //IF NUMBER IS <OR>1 ACCORDIGLY MANTISSA IS DEVID OR MULTIPLIED TO GET ANTILOG
		   antilog=antilog*10;
		}
		}
		
		else
		{
		    for(i=1;i<x;i++)
	    {
		   antilog=antilog/10;
		}
		}
		return(antilog);
		}
	public void main(String args[])throws IOException 
	{
	                
	    BufferedReader ob = new BufferedReader(new InputStreamReader(System.in));
	    System.out.println("DO YOU WANT TO SEE ANTILOG TABLE");
	    System.out.println("ENTER 1 FOR YES");
	    System.out.println("ENTER 0 FOR NO");     //OPTION TO SEE ANTILOG TABLE
	    String s2=ob.readLine();
	    int choice=Integer.parseInt(s2);
	    if(choice==1)
	    {
	        System.out.println("<------------------------------------------------ANTILOG TABLE----------------------------------------------> ");
	        System.out.println( );
	        System.out.println("                                                                        <-----------------ADD---------------> ");
	        System.out.println( );
	        System.out.println("      0     1     2     3     4     5     6     7     8     9           0   1   2   3   4   5   6   7   8   9");
	        System.out.println( );
	        int i,j,o,k,t1;
	        double j1,o1,k1;                      //RUNNING LOOP TO DISPLAY ANTILOG TABLE
	        for(i=0;i<100;i++)
	        {
	            if(i<10)
	            System.out.print(".0"+i+"  ");
	            else
	            System.out.print("."+i+"  ");
	            for(j=0;j<10;j++)
	            {
	               j1=a2[i][j];
	               if(j1!=0)
	               {
	                  while(j1<1000)
	                 {
	                   System.out.print(" ");
	                   j1=j1*10;
	                 }
	               }
	               else
	               {
	                 System.out.print("   ");
	               }
	               System.out.print(a2[i][j]+"  ");
	            }
	            System.out.print("    ");
	            for(o=0;o<10;o++)
	            {
	                o1=a[i][o];
	               if(o1!=0)
	               {
	                 while(o1<10)
	                 {
	                   System.out.print(" ");
	                   o1=o1*10;
	                 }
	               }
	               else
	               {
	                 if(o==0)
	                 System.out.print("   ");
	                 else
	                 System.out.print(" ");
	               }
	                System.out.print(a[i][o]+"  ");
	            }
	                System.out.println();
	            }
	        }
	     System.out.println( );
	     int t=1,choice1,loop=0;
	     while(t!=0)
	    {
	    System.out.println( );
	    if(loop==0)
	    System.out.println("ENTER A NUMBER");
	    else
	    System.out.println("ENTER ANOTHER NUMBER");
	    loop++;
	    String s1=ob.readLine();
	    double n=Double.parseDouble(s1);
		double n1=cal(n);
		System.out.println("THE ANTILOGARITHM OF " +n +" IS = "+n1+"  (NEAREST TO 4 DECIMAL PLACE)");
		System.out.println( );
		System.out.println("DO YOU WANT TO CONTINUE ");
		System.out.println("ENTER 1 FOR YES");             //LOOP TO CONTINUE
		System.out.println("ENTER 0 FOR NO");
		String s3=ob.readLine();
	    choice1=Integer.parseInt(s3);
	    if(choice1==1)
	    t=1;
	    else
	    t=0;
	    if(t==0)
	    if(t==0)
	    {
	        System.out.println();
	    System.out.print("<-----------------------------------------------THANK YOU----------------------------------------------------->");
	    }
	 }
    }
}